import streamlit as st

import agentpy as ap
import numpy as np
import matplotlib.pyplot as plt
import IPython.display


from pathfinding.core.grid import Grid
from pathfinding.finder.a_star import AStarFinder

from pathfinding.core.diagonal_movement import DiagonalMovement

import requests

# longdo_token = "6b9e34b8551b12ebbb95956c56383211"

# HTML content for the Longdo Map
html_content = """
<html>
  <head>
    <meta charset="UTF-8" />
    <title>Longdo Map</title>
    <style type="text/css">
      html {
        height: 100%;
      }
      body {
        margin: 0px;
        height: 100%;
      }
      #map {
        height: 100%;
      }
    </style>
    <script
      type="text/javascript"
      src="https://api.longdo.com/map/?key=6b9e34b8551b12ebbb95956c56383211"
    ></script>
    <script>
      function init() {
        var map = new longdo.Map({
          placeholder: document.getElementById("map"),
        });

        // üå¥üçπüçâ‚õ±Ô∏èü••‡∏Å‡∏≥‡∏´‡∏ô‡∏î marksüå¥üçπüçâ‚õ±Ô∏èü••
        var marker1 = new longdo.Marker({ lon: 100.77068388462067, lat: 13.727868667926447 });
        map.Overlays.add(marker1);

        var marker2 = new longdo.Marker({ lon: 100.76436460018158, lat: 13.727668037525024 });
        map.Overlays.add(marker2);

        var marker3 = new longdo.Marker({ lon: 100.77500224113464, lat: 13.729528421937207 });
        map.Overlays.add(marker3);

        var marker4 = new longdo.Marker({ lon: 100.77996164560318, lat: 13.7295518720667 });
        map.Overlays.add(marker4);

        var marker5 = new longdo.Marker({ lon: 100.78087896108627, lat: 13.730672264410334 });
        map.Overlays.add(marker5);

        var marker6 = new longdo.Marker({ lon: 100.77518731355667, lat: 13.726521574796058 });
        map.Overlays.add(marker6);

        var marker7 = new longdo.Marker({ lon: 100.77740550041199, lat: 13.729210542172659 });
        map.Overlays.add(marker7);

        map.bound({
          minLon: 100.763,
          minLat: 13.724,
          maxLon: 100.784,
          maxLat: 13.7315,
        });

        //map.Route.mode(longdo.RouteMode.Cost);
        //map.Route.mode(longdo.RouteMode.Distance);  // ‡πÉ‡∏ä‡πâ Mode ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
        //map.Route.enableRestrict(longdo.RouteRestrict.Bike, true);
        map.Route.mode(longdo.RouteMode.Walk);

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á marker1 ‡πÅ‡∏•‡∏∞ marker5
        map.Route.placeholder(document.getElementById('results'));
        map.Route.add(marker3);
        map.Route.add(marker5);
        map.Route.search(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ search ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á

      }
    </script>
  </head>
  <body onload="init();">
    <div id="map"></div>
    <div id="results"></div>
  </body>
</html>
"""

# Display the HTML content in Streamlit
st.components.v1.html(html_content, height=600, width=1000)



def find_nearest_path(start_position, road_data , is_road, size_grid, destination_agent):

    # grid_data_Obstacles = np.where(is_road, 1, 0) # ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ 1 ‡πÄ‡∏õ‡πá‡∏ô road ‡πÅ‡∏•‡πâ‡∏ß 0 ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á ‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ path ‡πÄ‡∏õ‡πá‡∏ô None ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á (Obstacles) ‡∏ö‡∏ô‡∏Å‡∏£‡∏¥‡∏î ‡πÑ‡∏î‡πâ
    grid_data = np.ones((size_grid, size_grid))
    grid = Grid(matrix=grid_data)

    # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    start_x, start_y = start_position # ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (x, y) ‡∏Ç‡∏≠‡∏á station ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏ñ‡∏∂‡∏á Station ‡πÑ‡∏õ Destination
    start_node = grid.node(start_x, start_y)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì A* ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    finder = AStarFinder()
    best_path_near_Station = None
    shortest_distance = float('inf') # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå (infinity)

    for road_positions in road_data: # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≤‡∏Å Station ‡πÑ‡∏õ‡∏´‡∏≤‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏á
        # print(road_positions) # (0, 10) (1, 10), ... ‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏™‡∏µ‡∏î‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡∏ô‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô road_data ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™
        des_x, des_y = road_positions
        end_node = grid.node(des_x, des_y)
        path, runs = finder.find_path(start_node, end_node, grid)  # start_node  <GridNode(5:7 0x7adbde0ff7c0)>
        # print(len(path)) # 0
        # print(path) # []

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        if path and len(path) < shortest_distance: # ‡∏ñ‡πâ‡∏≤ path ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None
            shortest_distance = len(path)
            best_path_near_Station = path

    if best_path_near_Station is not None:
        best_path_near_Station.pop(0)

    # Set Variable
    x, y = best_path_near_Station[-1].x, best_path_near_Station[-1].y # (x , y) ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≠‡∏Å Station ‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô
    des_x_agent, des_y_agent = destination_agent
    # print(f"‡∏Ñ‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß : {x} {y} , ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Person : {des_x_agent} {des_y_agent}") # 10 6


    # print("---------------------")
    # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÅ‡∏•‡πâ‡∏ß Person ‡∏à‡∏∞‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏≤‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ ‡∏à‡∏∂‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏´‡πâ Person ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Des ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà Des ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏°‡∏µ 2 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
    # 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á best_path ‡∏ó‡∏µ‡πà Des ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏ñ‡∏ô‡∏ô‡∏Å‡πà‡∏≠‡∏ô (Des = start , road = End)
    best_path_near_Des = None
    shortest_distance = float('inf')
    start_node = grid.node(des_x_agent, des_y_agent)
    for destination in road_data:
        des_x, des_y = destination
        end_node = grid.node(des_x, des_y)
        path, runs = finder.find_path(start_node, end_node, grid)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        if path and len(path) < shortest_distance: # ‡∏ñ‡πâ‡∏≤ path ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None
            shortest_distance = len(path)
            best_path_near_Des = path
    best_path_near_Des.reverse() # reverse ‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏∑‡∏≠ Des ‡πÉ‡∏´‡πâ‡∏à‡∏∏‡∏î Des ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    # print(f"1. ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà agent ‡∏à‡∏∞‡∏õ‡∏±‡πà‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏°‡∏≤ {best_path_near_Des[0].x} {best_path_near_Des[0].y}")


    # print("---------------------")
    # 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô (‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö Station) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢ (Des) -->  (‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ return ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏îendNode‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏•‡∏¢‡πÅ‡∏Å‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ó‡∏ô)
    x_start_coordinate_second , y_start_coordinate_second = best_path_near_Station[-1].x , best_path_near_Station[-1].y
    end_node_second = grid.node(best_path_near_Des[0].x, best_path_near_Des[0].y)

    # Check Mistake
    if start_node == end_node:
      print("üöß ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô!")

    start_node = grid.node(x_start_coordinate_second, y_start_coordinate_second)


    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ö‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡πÅ‡∏¢‡∏á‡∏Æ‡∏±‡∏ö
    # finder = AStarFinder(diagonal_movement=DiagonalMovement.never)


    # print("---------------------")
    if best_path_near_Des is not None: # ‡∏•‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£
        best_path_near_Des.pop(0)

    # Check if best_path_near_Des is empty before accessing elements
    if not best_path_near_Des:
        return [best_path_near_Station, best_path_near_Des, (x_start_coordinate_second, y_start_coordinate_second), (x_start_coordinate_second, y_start_coordinate_second)] # Return the start coordinates if best_path_near_Des is empty

    # ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    return [best_path_near_Station,best_path_near_Des, (x_start_coordinate_second, y_start_coordinate_second), (best_path_near_Des[0].x, best_path_near_Des[0].y)]

#‡πÑ‡∏ß‡πâ‡∏´‡∏≤ station ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏™‡∏∏‡∏î
def find_nearest_station(person_position, station_locations):
    min_distance = float('inf')
    nearest_station = None
    for station_position in station_locations:
        distance = np.linalg.norm(np.array(person_position) - np.array(station_position))
        if distance < min_distance:
            min_distance = distance
            nearest_station = station_position
    return nearest_station

class Person(ap.Agent):
    counter = 1  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ó‡∏µ‡πà 100

    def setup(self):
        self.speed = 1
        self.path = None
        self.name = f"{Person.counter}"  # ‡πÉ‡∏ä‡πâ counter ‡πÄ‡∏õ‡πá‡∏ô ID
        Person.counter += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏° counter ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡πÉ‡∏´‡∏°‡πà
        self.block_step = 0 # ‡∏Ñ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏ß‡πà‡∏≤ ‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß Person ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏Å‡∏µ‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ö‡∏ô  grid ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥)
        self.sta_to_des = 0  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô grid node
        self.destination = (np.random.randint(0, self.p.size), np.random.randint(0, self.p.size)) # ‡πÄ‡∏õ‡πá‡∏ô tuple (x,y) , random destination‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞Person or agent

        self.arrived = False # False‡∏Ñ‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤agent‡∏¢‡∏±‡∏á‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏áDes, True‡∏Ñ‡∏∑‡∏≠‡∏ñ‡∏∂‡∏áDes‡πÅ‡∏•‡πâ‡∏ß

# station_position
    def find_path(self):
        # ‡∏´‡∏≤ station ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        person_position = self.model.grid.positions[self]
        nearest_station = find_nearest_station(person_position, self.model.station_locations)
        self.nearest_station = nearest_station  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô agent

        # ‡∏´‡∏≤ station ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏î‡∏™‡∏™‡∏∏‡∏îüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ô
        nearest_station_to_destination = find_nearest_station(self.destination, self.model.station_locations)
        self.nearest_station_to_destination = nearest_station_to_destination

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å is_road (‡∏ñ‡∏ô‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠ True)
        # grid_data = np.where(self.model.is_road, 1, 0)  # ‡πÉ‡∏ä‡πâ 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞ 0 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
        grid_data = np.ones((self.p.size, self.p.size))
        grid = Grid(matrix=grid_data)

        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Person
        x, y = self.model.grid.positions[self]
        start = grid.node(x, y)

        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Station
        station_x, station_y = nearest_station
        end = grid.node(station_x, station_y)

        # ‡πÉ‡∏ä‡πâ A* ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        finder = AStarFinder()

        path, _ = finder.find_path(start, end, grid)
        # path [<GridNode(16:19 0x7b83a33891b0)>, <GridNode(16:18 0x7b83a338b730)> ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ --> 16:19 ‡∏Ñ‡∏∑‡∏≠ (x,y) ‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà memory address

        path.pop(0) # ‡∏ó‡∏≥‡πÑ‡∏°‡∏ñ‡∏∂‡∏á pop ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ path ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏ô‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ô step 1 ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏Ç‡∏¢‡∏±‡∏ö ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏Ç‡∏¢‡∏±‡∏ö step 2 ‡πÅ‡∏ó‡∏ô ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏°‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° block_step ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á station
        # self.block_step += len(path)

        #üß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ô
        # ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏Å‡∏•‡πâ des
        if nearest_station != nearest_station_to_destination:
            start = grid.node(station_x, station_y)
            station_dest_x, station_dest_y = nearest_station_to_destination
            end = grid.node(station_dest_x, station_dest_y)
            path_between_stations, _ = finder.find_path(start, end, grid)
            path_between_stations.pop(0)
        else:
            path_between_stations = []

        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á Destination
        start = grid.node(*nearest_station_to_destination)  #üß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ô
        des_x, des_y = self.destination
        end = grid.node(des_x, des_y)  #üß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ô
        path_to_Des, _ = finder.find_path(grid.node(station_x, station_y), grid.node(des_x, des_y), grid)
        path_to_Des.pop(0)

        path_journey = path + path_between_stations + path_to_Des #üß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ô
        self.path = path_journey

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏áüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ô
        self.block_step = len(self.path)
        self.sta_to_des = len(path_between_stations) + len(path)

    def move(self):
        if self.path and len(self.path) > 0:
            # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            next_position = self.path.pop(0)  # ‡∏î‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            # x, y = self.model.grid.positions[self]
            # if (x == 5 and y == 9):
            #   print(self.name)

            self.model.grid.move_to(self, next_position)
        # if len(self.path) == 0:
        #   print("‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á" , self.name )

class Bicycle(ap.Agent):
    def setup(self):
        self.speed = 1

    def move(self):
        x, y = self.model.grid.positions[self]
        next_position = (x + self.speed) % self.model.p.size, y
        if self.model.is_road[next_position]:
            self.model.grid.move_to(self, next_position)

class TrafficModel(ap.Model):
    def setup(self):

        self.all_arrived = int(self.p.agents_Person) # ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô agent ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç int --> ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î agent ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á Destination ‡∏à‡∏∞‡∏°‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ -1 ‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ ‡∏ó‡∏∏‡∏Å agent ‡∏ñ‡∏∂‡∏á Destination ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0

        self.grid = ap.Grid(self, [self.p.size, self.p.size], track_empty=True)

        # Create Person
        self.agents_Person = ap.AgentList(self, self.p.agents_Person, Person)

        # Create Bicycle
        self.agents_Bicycle = ap.AgentList(self, self.p.agents_Bicycle, Bicycle)

        # ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß add ‡∏ö‡∏ô Grid
        num_person_samples = self.p.agents_Person # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°
        positions_person = [(np.random.randint(0, self.p.size), np.random.randint(0, self.p.size)) for _ in range(num_person_samples)]
        self.grid.add_agents(self.agents_Person, positions_person)


        # Set Road Route
        line_road = self.p.size // 2
        road_positions = [(x, line_road) for x in range(self.p.size)] + [(line_road, y) for y in range(self.p.size)]

        # Set ‡∏à‡∏∏‡∏î‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô Road_Position
        self.positions_bicycle = self.random.sample(road_positions, k=len(self.agents_Bicycle))
        print("start_positions", self.positions_bicycle) # ‡πÄ‡∏ä‡πà‡∏ô [(19, 10)]
        self.grid.add_agents(self.agents_Bicycle, self.positions_bicycle)


        self.is_road = np.zeros((self.p.size, self.p.size), dtype=bool)
        self.is_road[:, line_road] = True # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (:) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô road_y ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        self.is_road[line_road, :] = True
        # ‡∏à‡∏∞‡πÑ‡∏î‡πâ is_road ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ô‡∏µ‡πâ array([[False, False, False, False, True, False, False, False]]) ‡∏Å‡∏£‡∏ì‡∏µsize 8*8
        self.is_road[13][5] = True
        self.is_road[14][5] = True

        self.is_station = np.zeros((self.p.size, self.p.size), dtype=bool)
        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Fix Station Location üö©üè≥Ô∏è‚Äçüåà --> ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡∏ö‡∏ñ‡∏ô‡∏ô ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î Error ‡∏ä‡∏∑‡πà‡∏≠ AttributeError: 'NoneType' object has no attribute 'pop'
        self.station_locations = [(3,9), (6,11), (9,6), (9,18), (11,2), (11,8), (11,12), (11,16), (14, 11), (17,9)]
        for each_station in self.station_locations:
            self.is_station[each_station] = True  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ

        # station_position = self.station_locations[0]  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÅ‡∏£‡∏Å
        for person in self.agents_Person:
            # person.find_path(station_position)
            person.find_path() # ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ person ‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

    def step(self):
        for agent in self.agents_Bicycle:
            agent.move()

        for agent in self.agents_Person: # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            if (agent.arrived == True): # ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡πÅ‡∏°‡πâagent‡∏à‡∏∞‡πÑ‡∏õDes‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ã‡πâ‡∏≥‡πÜ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ìagent‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ continue‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏•‡∏¢
              continue
            agent_position = self.model.grid.positions[agent]
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á agent ‡πÄ‡∏Ç‡πâ‡∏≤ Station ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏ô‡∏ô ‡∏û‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ Path‡∏à‡∏ô‡∏ñ‡∏∂‡∏á Des ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ eles ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ if ‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            if agent_position in self.station_locations:
              # print("enter goal" , agent_position , "name : ",agent.name) # enter goal (5, 9) 3
              station_position = (agent_position[0], agent_position[1])  # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á station
              road_positions = [(x, self.p.size // 2) for x in range(self.p.size)] + [(self.p.size // 2, y) for y in range(self.p.size)]

              # ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ return ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô find_nearest_path
              nearest_path = find_nearest_path(station_position, road_positions, self.is_road, self.p.size , agent.destination) # ‡∏´‡∏≤ Path ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà Person ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏ñ‡∏∂‡∏á Station ‡∏à‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ñ‡∏ô‡∏ô [<GridNode(5:9 0x7a8933879f60)>, <GridNode(5:10 0x7a89338785b0)>]

              # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠
              finder = AStarFinder()
              grid_data_Obstacles = np.where(self.is_road, 1, 5) # ‡πÉ‡∏ä‡πâ 1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞ 5 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏∑‡∏≠‡∏ó‡∏≥‡πÑ‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î5? = ‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î 0 ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤ cost ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 1 ‡∏Å‡∏±‡∏ö 0 ‡∏°‡∏±‡∏ô‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏î‡∏π‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏°‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏î ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤cost‡πÉ‡∏´‡πâ‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏•‡∏Ç5‡∏Å‡πá‡πÅ‡∏Ñ‡πà‡∏™‡∏∏‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏•‡∏Ç‡∏™‡∏ß‡∏¢‡∏î‡∏µ‡πÄ‡∏â‡∏¢‡πÜ ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏´‡∏° ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡πá‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÑ‡∏£
              grid = Grid(matrix=grid_data_Obstacles) # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏Å‡∏µ‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠ ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ñ‡∏ô‡∏ô ‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏±‡πà‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô Only!
              x, y = nearest_path[2] # (x , y) ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö Station ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
              des_x, des_y = nearest_path[3] # (des_x , des_y)  ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö Des ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
              start = grid.node(x, y)
              end = grid.node(des_x, des_y)
              road_path, runs = finder.find_path(start, end, grid)

              # ‡∏•‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏≠‡∏≠‡∏Å ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏£
              if road_path is not None:
                road_path.pop(0)
              best_path_road_near_Destination = nearest_path[1]
              print("Name : " , agent.name , "best_path_road_near_Destination " , best_path_road_near_Destination)
              #üß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ô
              # if best_path_road_near_Destination is not None:
              #   best_path_road_near_Destination.pop(0)

              #‡πÅ‡∏Å‡πâ‡∏≠‡∏±‡∏ô‡∏ö‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏Å‡∏±‡∏ô IndexError: pop from empty list

              if best_path_road_near_Destination:
                best_path_road_near_Destination.pop(0)
                #üß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ôüß™ü™ô


              best_path = nearest_path[0] + road_path + best_path_road_near_Destination # ‡∏ô‡∏≥‡∏™‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡∏ö‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ Best_path
              print(f"Best path {best_path} ‡∏Ç‡∏≠‡∏á {agent.name}")
              agent.path = best_path # ‡∏™‡∏£‡∏∏‡∏õ Best_path ‡∏Ñ‡∏∑‡∏≠ best_path_road_near_Station + road_path + best_path_road_near_Destination
              agent.move() # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô
            else:
              # ‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î Move ‡πÑ‡∏õ‡∏´‡∏≤ Station ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏û‡∏≠‡∏°‡∏≤‡∏ñ‡∏∂‡∏á Station‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç if ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î agent.path ‡πÉ‡∏´‡∏°‡πà ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ else ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏à‡∏ô‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ñ‡∏∂‡∏á Des
              agent.move()
            if (len(agent.path) == 0):
              print(f"‡∏ß‡πâ‡∏≤‡∏ß‡πÜ‡πÜ step ‡∏ó‡∏µ‡πà: {self.t} ‡∏Ç‡∏≠‡∏áagent‡∏ä‡∏∑‡πà‡∏≠: {agent.name}") # ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î Des ‡∏û‡∏≠‡∏î‡∏µ
              self.all_arrived -= 1
              agent.arrived = True
              print("self.all_arrived ",self.all_arrived)

        # if self.all_arrived == 0:
        #   print(f"‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏Æ‡∏∞ üíµüíµ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô step ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡∏∑‡∏≠ --> {self.t}")
        #   self.stop()
        # üõïüõïüõïüõïüõïüõïüõï
        if self.t == self.p.steps:
          self.stop()

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    def report(self, key=None, value=None): # Add key and value arguments ‡∏Å‡∏±‡∏ô error ‡πÄ‡∏â‡∏¢‡πÜ
        if key == 'seed':
            return # Exit the method

        for agent in self.agents_Person:
            start_y, start_x = agent.model.grid.positions[agent]
            station_y, station_x = agent.nearest_station
            dest_station_y, dest_station_x = agent.nearest_station_to_destination
            des_y, des_x = agent.destination
            # st.write(f"Person {agent.name}:"
            #   f"\n\t‡∏à‡∏∏‡∏î‡πÄ‡∏Å‡∏¥‡∏î ({start_x}, {start_y})"
            #   f"\n\tNearest station ({station_x}, {station_y})"
            #   f"\n\tDestination ({des_x}, {des_y})"
            #   f"\n\tStation ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏î‡∏™: ({dest_station_x}, {dest_station_y})"
            #   f"\n\t‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å station ‡πÑ‡∏õ destination {agent.sta_to_des} block steps"
            #   f"\n\t‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {agent.block_step} block steps")

    def update(self):
        return self.is_road, self.grid.positions, self.is_station, self.station_locations

    # def end(self):
    #     return self.all_arrived or self.t >= self.p.max_steps

def animation_plot(model, ax):
    road, positions, _, stations = model.update() # ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ time-step ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á:
    # road: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ñ‡∏ô‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á array ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 (binary) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ñ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    # positions: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dictionary ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (y, x) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô --> ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå‡∏™‡∏≠‡∏á‡∏°‡∏¥‡∏ï‡∏¥ ‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ (row, column) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö (y, x) ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á

    # Plot road
    ax.imshow(road, cmap='binary') # ‡πÉ‡∏ä‡πâ ax.imshow() ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô (road) ‡∏•‡∏á‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô ax ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ (colormap) ‡πÅ‡∏ö‡∏ö binary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏ô‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ (0 ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏•‡∏∞ 1 ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á)

    # xticks ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏µ‡∏î‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô x ‡∏≠‡∏∞
    ax.set_xticks(np.arange(-0.5, model.p.size, 1), minor=True)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô , ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á tick marks ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà -0.5, 0.5, 1.5, ..., 19.5 ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏£‡∏∏‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£
    ax.set_yticks(np.arange(-0.5, model.p.size, 1), minor=True)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á

    ax.grid(which='minor', color='black', linestyle='-', linewidth=2)  # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡∏™‡∏µ‡∏î‡∏≥
    ax.tick_params(which='minor', size=0)  # ‡∏ã‡πà‡∏≠‡∏ô tick-mark

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î (size)
    ax.set_xticks(np.arange(model.p.size))  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏Å‡∏ô X
    ax.set_yticks(np.arange(model.p.size))  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏Å‡∏ô Y
    ax.set_xticklabels(np.arange(model.p.size))  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô X
    ax.set_yticklabels(np.arange(model.p.size))  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô Y

    SIZE_CIRCLE_DRAW = 40 # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î

    # Plot bicycles
    positions_bicycle = {k: v for k, v in model.grid.positions.items() if isinstance(k, Bicycle)}
    # model.grid.positions ‡∏Ñ‡∏∑‡∏≠ dictionary ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô (agents) ‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô (agent) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô key ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô (‡πÄ‡∏õ‡πá‡∏ô tuple (x, y)) ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô value
    # ==> ‡∏™‡πà‡∏ß‡∏ô items() ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á key-value pairs ‡πÉ‡∏ô dictionary ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô (agents) ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤.
    # k = ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô (agent) ‡πÄ‡∏ä‡πà‡∏ô Bicycle ‡∏´‡∏£‡∏∑‡∏≠ Person , v = ‡πÅ‡∏ó‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô (agent) ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (x, y)
    if positions_bicycle: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÉ‡∏ô simulation ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        y, x = zip(*positions_bicycle.values()) # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å positions.values() ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î y ‡πÅ‡∏•‡∏∞ x ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô zip() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ plot ‡∏à‡∏∏‡∏î
        ax.scatter(x, y, c='red', s=SIZE_CIRCLE_DRAW) # ‡∏ß‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏•‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ax.scatter() ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞ plot ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (x, y) , ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÅ‡∏î‡∏á (c='red') ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î (s=50)

    # Plot persons
    positions_person = {k: v for k, v in model.grid.positions.items() if isinstance(k, Person)}  # ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
    # positions_person ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô dictionary ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Person ‡πÄ‡∏ä‡πà‡∏ô {Person1: (x1, y1), Person2: (x2, y2),...}
    if positions_person:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        y_person, x_person = zip(*positions_person.values())  # ‡πÅ‡∏¢‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î y ‡πÅ‡∏•‡∏∞ x
        ax.scatter(x_person, y_person, c='blue', s=SIZE_CIRCLE_DRAW)  # ‡∏ß‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
        for person, (x, y) in zip(positions_person.keys(), zip(x_person, y_person)):
          ax.text(x, y, f"P-{person.name}", fontsize=10, ha='right')
          # Plot Destination ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Person
          des_y, des_x = person.destination
          ax.scatter(des_x, des_y, c='grey', s=SIZE_CIRCLE_DRAW)
          ax.text(des_x, des_y, f"Des-{person.name}", fontsize=10, ha='right')


    # Plot Station (‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
    y_station, x_station = zip(*stations)  # ‡πÉ‡∏ä‡πâ zip ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å
    ax.scatter(x_station, y_station, c='green', s=SIZE_CIRCLE_DRAW)  # ‡∏ß‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤


    ax.set_title(f"Traffic Simulation\n"
                  f"Time-step: {model.t}")
def run_model(max_steps):
    parameters = {
        'steps': max_steps,
        'agents_Bicycle': 1, # ‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ test ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ö‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞ step ‡πÄ‡∏â‡∏¢‡πÜ ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Station
        'agents_Person':10,
        'size': 20 # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏ß‡πâ‡∏≤‡∏áx‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î
    }
    fig, ax = plt.subplots(figsize=(5, 5)) #  ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ (figure) ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà _x_ ‡∏ô‡∏¥‡πâ‡∏ß , fig ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô , ax ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Å‡∏ô (axis) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏ö‡∏ô‡∏£‡∏π‡∏õ‡∏ô‡∏±‡πâ‡∏ô
    model = TrafficModel(parameters)
    animation = ap.animate(model, fig, ax, animation_plot) # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô animate ‡∏à‡∏≤‡∏Å‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ AgentPy ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• TrafficModel , animation_plot ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°
    
    model.report()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡∏∏‡∏õ

    return st.components.v1.html(animation.to_jshtml(fps=10), height=600)

# Run the model and display the animation
run_model(20) # max ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠100 ‡πÅ‡∏ï‡πà‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏ó‡∏∏‡∏Å agent ‡πÄ‡∏Ç‡πâ‡∏≤ des ‡πÑ‡∏õ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ,‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î infinity ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà int ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ

st.write("‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á‡∏´‡∏°‡∏≠‡∏à‡∏±‡∏á ‡πÅ‡∏á‡πÜ‡πÜ‡πÜ‡πÜ‡πÜ‡πÜ‡πÜ")