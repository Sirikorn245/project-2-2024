import agentpy as ap
import numpy as np
import matplotlib.pyplot as plt
import IPython.display

# üèùÔ∏èüçπ‚õ±Ô∏èüåû üåä
import time
import random


from pathfinding.core.grid import Grid
from pathfinding.finder.a_star import AStarFinder
from pathfinding.core.diagonal_movement import DiagonalMovement

# Animation Simulation
from matplotlib.animation import FuncAnimation
import IPython

import streamlit as st

import ipywidgets as widgets




class Bicycle(ap.Agent):
# ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏à‡∏∞‡∏ó‡∏≥‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏°‡∏±‡∏ô‡∏´‡∏°‡∏î
    def setup(self):
        self.speed = 1
    def move(self):
        x, y = self.model.grid.positions[self]
        next_position = (x + self.speed) % self.model.p.size, y
        if self.model.is_road[next_position]:
            self.model.grid.move_to(self, next_position)




class Station(ap.Agent):
    def setup(self):
        self.amount_Bicycle = self.model.p.capicity_Station
        name_station = ["LatKra", "Asoke", "Siam", "Phaya"]
        self.name = random.choice(name_station)




class Person(ap.Agent):
    counter = 1  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ó‡∏µ‡πà 100

    def setup(self):
        # ‡∏Ñ‡πà‡∏≤ Default
        self.speed = 1
        self.path = None
        self.name = f"{Person.counter}"  # ‡πÉ‡∏ä‡πâ counter ‡πÄ‡∏õ‡πá‡∏ô ID
        Person.counter += 1  # ‡πÄ‡∏û‡∏¥‡πà‡∏° counter ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡πÉ‡∏´‡∏°‡πà
        self.block_step = 0 # ‡∏Ñ‡∏¥‡∏î‡πÑ‡∏ß‡πâ‡∏ß‡πà‡∏≤ ‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß Person ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏Å‡∏µ‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ö‡∏ô  grid ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥)
        self.sta_to_des = 0  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô grid node
        self.destination = (np.random.randint(0, self.p.size), np.random.randint(0, self.p.size)) # ‡πÄ‡∏õ‡πá‡∏ô tuple (x,y) , random destination‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞Person or agent
        self.arrived = False # False‡∏Ñ‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤agent‡∏¢‡∏±‡∏á‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏áDes, True‡∏Ñ‡∏∑‡∏≠‡∏ñ‡∏∂‡∏áDes‡πÅ‡∏•‡πâ‡∏ß
        self.isBike_in_use = False # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏ä‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô True

        # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≠‡∏ô Setup
        self.station_rent_position = None

        # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
        # self.start : ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á x,y ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

        # ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å setup
        self.station_return_position = None






    def find_path_btw_road_and_to_Des(self , agents_Station, size_grid , is_road):
        """‚õ± ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏π‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"""
        person_position = self.model.grid.positions[self]

        grid_data = np.ones((size_grid, size_grid))
        grid = Grid(matrix=grid_data)

        # 1. ‡∏´‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏´‡∏ô (‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤)
        start_x, start_y = person_position
        start_node = grid.node(self.destination[0], self.destination[1])
        finder = AStarFinder()
        best_path_Station_Return_To_Des = None
        shortest_distance = float('inf')

        for station in agents_Station: # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≤‡∏Å Station ‡πÑ‡∏õ‡∏´‡∏≤‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏á
            if station.position != person_position: # ‡∏ó‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ ‡∏ì ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà
              des_x, des_y = station.position
              end_node = grid.node(des_x, des_y)
              path, runs = finder.find_path(start_node, end_node, grid)  # start_node  <GridNode(5:7 0x7adbde0ff7c0)>

              # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
              if path and len(path) < shortest_distance: # ‡∏ñ‡πâ‡∏≤ path ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None
                  shortest_distance = len(path)
                  best_path_Station_Return_To_Des = path

        # ‡πÑ‡∏î‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        self.station_return_position = (best_path_Station_Return_To_Des[-1].x , best_path_Station_Return_To_Des[-1].y)
        best_path_Station_Return_To_Des.reverse() # ‡πÑ‡∏î‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô to ‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á

        # 2. ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏¢‡∏∑‡∏°‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô ‡πÑ‡∏õ‡∏¢‡∏±‡∏á ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô
        grid_data_Obstacles = Grid(matrix=np.where(is_road, 1, 5))
        finder = AStarFinder()
        x, y = self.station_rent_position
        start = grid_data_Obstacles.node(x , y)
        end = grid_data_Obstacles.node(self.station_return_position[0], self.station_return_position[1])
        road_path, runs = finder.find_path(start, end, grid_data_Obstacles)

        if road_path is not None:
          road_path.pop(0)  # ‡∏•‡∏öindex‡πÅ‡∏£‡∏Å‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏¢‡∏∑‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏ì ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß

        if best_path_Station_Return_To_Des is not None:
          best_path_Station_Return_To_Des.pop(0) # ‡∏•‡∏öindex‡πÅ‡∏£‡∏Å‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏ï‡∏≠‡∏ô‡∏ö‡∏ß‡∏Å list ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö road_path ‡∏à‡∏∞‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏öindex‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á road_path

        self.path = road_path + best_path_Station_Return_To_Des




    # ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Person ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏î
    def find_path_to_station(self , agents_Station, size_grid):
        """‚õè ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô set up Person ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô , ‡πÑ‡∏ß‡πâ‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô --> station ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        # ‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô --> station ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏ñ‡∏∂‡∏á station ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏ô step ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤ (‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡∏ô‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô)+(‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏áDes)
        person_position = self.model.grid.positions[self]

        grid_data = np.ones((size_grid, size_grid))
        grid = Grid(matrix=grid_data)

        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        start_x, start_y = person_position # ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (x, y) ‡∏Ç‡∏≠‡∏á station ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏ñ‡∏∂‡∏á Station ‡πÑ‡∏õ Destination
        start_node = grid.node(start_x, start_y)

        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì A* ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
        finder = AStarFinder()
        best_path_to_Station_Rent = None
        shortest_distance = float('inf') # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå (infinity)

        for station in agents_Station: # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≤‡∏Å Station ‡πÑ‡∏õ‡∏´‡∏≤‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏á
            if station.amount_Bicycle > 0 and station.position != person_position:
              des_x, des_y = station.position
              end_node = grid.node(des_x, des_y)
              path, runs = finder.find_path(start_node, end_node, grid)  # start_node  <GridNode(5:7 0x7adbde0ff7c0)>

              # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
              if path and len(path) < shortest_distance: # ‡∏ñ‡πâ‡∏≤ path ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None
                  shortest_distance = len(path)
                  best_path_to_Station_Rent = path

        if best_path_to_Station_Rent is not None:
            best_path_to_Station_Rent.pop(0)
        self.station_rent_position = (best_path_to_Station_Rent[-1].x , best_path_to_Station_Rent[-1].y)
        self.path = best_path_to_Station_Rent


    def move(self):
        if self.path and len(self.path) > 0:
            # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            next_position = self.path.pop(0)  # ‡∏î‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
            # x, y = self.model.grid.positions[self]
            self.model.grid.move_to(self, next_position)






class TrafficModel(ap.Model):
    def setup(self):

        self.all_arrived = int(self.p.agents_Person) # ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô agent ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç int --> ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î agent ‡πÑ‡∏õ‡∏ñ‡∏∂‡∏á Destination ‡∏à‡∏∞‡∏°‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ -1 ‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ ‡∏ó‡∏∏‡∏Å agent ‡∏ñ‡∏∂‡∏á Destination ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 0

        self.grid = ap.Grid(self, [self.p.size, self.p.size], track_empty=True)

        # Create Person
        self.agents_Person = ap.AgentList(self, self.p.agents_Person, Person)

        # Create Bicycle
        self.agents_Bicycle = ap.AgentList(self, self.p.agents_Bicycle, Bicycle)

        # ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß add ‡∏ö‡∏ô Grid
        num_person_samples = self.p.agents_Person # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°
        positions_person = [(np.random.randint(0, self.p.size), np.random.randint(0, self.p.size)) for _ in range(num_person_samples)]
        self.grid.add_agents(self.agents_Person, positions_person)
        for i, person in enumerate(self.agents_Person):
            person.start = positions_person[i]


        # Set Road Route
        line_road = self.p.size // 2
        road_positions = [(x, line_road) for x in range(self.p.size)] + [(line_road, y) for y in range(self.p.size)]

        # Set ‡∏à‡∏∏‡∏î‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ö‡∏ô‡∏ñ‡∏ô‡∏ô Road_Position
        self.positions_bicycle = self.random.sample(road_positions, k=len(self.agents_Bicycle))
        print("start_positions", self.positions_bicycle) # ‡πÄ‡∏ä‡πà‡∏ô [(19, 10)]
        self.grid.add_agents(self.agents_Bicycle, self.positions_bicycle)



        self.is_road = np.zeros((self.p.size, self.p.size), dtype=bool)
        self.is_road[:, line_road] = True # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (:) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô road_y ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ñ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
        self.is_road[line_road, :] = True
        # ‡∏à‡∏∞‡πÑ‡∏î‡πâ is_road ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ô‡∏µ‡πâ array([[False, False, False, False, True, False, False, False]]) ‡∏Å‡∏£‡∏ì‡∏µsize 8*8
        self.is_road[13][5] = True
        self.is_road[14][5] = True


        # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Fix Station Location üö©üè≥Ô∏è‚Äçüåà --> ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡∏ö‡∏ñ‡∏ô‡∏ô ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î Error ‡∏ä‡∏∑‡πà‡∏≠ AttributeError: 'NoneType' object has no attribute 'pop'
        # self.station_locations = [(3,9), (6,11), (9,6), (9,18), (11,2), (11,8), (11,12), (11,16), (14, 11), (17,9)]
        self.station_locations = [(3,9), (6,11), (9,6), (9,18), (11,2), (11,8),]

        # üöÄüöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á station ‡πÅ‡∏•‡πâ‡∏ß add ‡∏ö‡∏ô Grid
        num_station = len(self.station_locations)
        self.agents_Station = ap.AgentList(self, num_station, Station)
        self.grid.add_agents(self.agents_Station, self.station_locations)

        for i, station in enumerate(self.agents_Station):
            # station.setup(self.station_locations[i])
            station.position = self.station_locations[i]
            # print(f"i : {i}   station : {station.name} /// {station}  ---> {station.position}")

        # ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ person ‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        for person in self.agents_Person:
            person.find_path_to_station(self.agents_Station, self.p.size)
            person.block_step += len(person.path)

    def step(self):
        for agent in self.agents_Person: # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            agent_position = self.model.grid.positions[agent]

            if (agent.arrived == True): # ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡πÅ‡∏°‡πâagent‡∏à‡∏∞‡πÑ‡∏õDes‡πÅ‡∏•‡πâ‡∏ß ‡∏°‡∏±‡∏ô‡∏Å‡πá‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ã‡πâ‡∏≥‡πÜ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ìagent‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ continue‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏•‡∏¢
                continue

            # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
            elif (len(agent.path) == 1) and (agent.path[-1].x , agent.path[-1].y) == agent.station_rent_position:
              # ‡∏Ñ‡∏¥‡∏î self.path ‡∏ï‡πà‡∏≠
              # 1. ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Å‡πâ‡∏≤‡∏ß (‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á agent.move ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢)
              # 2. ‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
              agent.move()

              # 3. ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ agent ‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏´‡∏°
              for each_station in self.agents_Station:
                if each_station.position == agent.station_rent_position:
                    if each_station.amount_Bicycle > 0: # ‡∏•‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å
                      each_station.amount_Bicycle -= 1
                      print(f"{each_station.name} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà : {each_station.amount_Bicycle} ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏¢‡∏∑‡∏°‡∏Ñ‡∏∑‡∏≠ : {agent.name}")
                      agent.isBike_in_use = True # ‡∏¢‡∏∑‡∏°‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
                      # 4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Destination
                      agent.find_path_btw_road_and_to_Des(self.agents_Station, self.p.size, self.is_road)
                      agent.block_step += len(agent.path)

                    else: # ‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏´‡∏°‡∏î ‡∏à‡∏∞‡∏Ñ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õstation‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏π‡πà ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
                      agent.find_path_to_station(self.agents_Station, self.p.size) # ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏ì ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πàagent‡∏≠‡∏¢‡∏π‡πà ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                      agent.block_step += len(agent.path)

            # 5. ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏ñ‡πâ‡∏≤‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô ‡∏à‡∏∞‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πâ‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å
            elif agent_position == agent.station_return_position:
              for each_station in self.agents_Station:
                if each_station.position == agent.station_return_position:
                    each_station.amount_Bicycle += 1
                    agent.isBike_in_use = False
                    agent.move()
            # ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ else ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ self.path ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô, ‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏ß‡∏Åif elif ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏Ñ‡∏∑‡∏≠ ‡∏ô‡∏≤‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏°‡∏µ self.path ‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏°
            else:
              agent.move()


            if (len(agent.path) == 0) and agent.destination == agent_position:
              self.all_arrived -= 1
              agent.arrived = True # ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ agent ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß

        if self.all_arrived == 0:
          print(f"‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß‡∏Æ‡∏∞ üíµüíµ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô step ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πá‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡∏∑‡∏≠ --> {self.t}")
          self.stop()
          self.report()

        if self.t == self.p.steps:
          self.stop()
          self.report()



    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    def report(self, key=None, value=None): # Add key and value arguments ‡∏Å‡∏±‡∏ô error ‡πÄ‡∏â‡∏¢‡πÜ
        if key == 'seed':
            return # Exit the method

        for agent in self.agents_Person:
            start_y, start_x = agent.start
            station_y, station_x = agent.station_rent_position
            dest_station_y, dest_station_x = agent.station_return_position
            des_y, des_x = agent.destination
            print(f"Person {agent.name}:"
              f"\n\t‡∏à‡∏∏‡∏î‡πÄ‡∏Å‡∏¥‡∏î ({start_y}, {start_x})" # ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏™‡∏•‡∏±‡∏ö x ‡∏Å‡∏±‡∏ö y ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡∏•‡∏∞‡πÅ‡∏Å‡∏ô‡∏Å‡∏±‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏î‡∏≠‡∏≠‡∏Å
              f"\n\tDestination ({des_y}, {des_x})"
              f"\n\t‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏¢‡∏∑‡∏°‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô ({station_y}, {station_x})"
              f"\n\t‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô: ({dest_station_y}, {dest_station_x})"
              f"\n\t‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {agent.block_step} block steps")


    def update(self):
        # update ‡πÅ‡∏ï‡πà‡∏•‡∏∞ step ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏ä‡∏±‡∏ô animation_plot

        return self.is_road, self.station_locations, self.agents_Station , self.agents_Person

    # def end(self):
    #     return self.all_arrived or self.t >= self.p.max_steps






def animation_plot(model, ax):
    """
        Updates and plots the simulation state.

        Args:
            frame (int): The current frame number of the animation.
            model (TrafficModel): The simulation model instance.
            ax (matplotlib.axes.Axes): The axes object to plot on.
    """

    road, stations, agents_Station, agents_Person = model.update() # ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ time-step ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á:
    # road: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ñ‡∏ô‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á array ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1 (binary) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ñ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    # positions: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dictionary ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (y, x) ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô --> ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå‡∏™‡∏≠‡∏á‡∏°‡∏¥‡∏ï‡∏¥ ‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ (row, column) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö (y, x) ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á

    # Plot road
    ax.imshow(road, cmap='binary') # ‡πÉ‡∏ä‡πâ ax.imshow() ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏ô‡∏ô (road) ‡∏•‡∏á‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô ax ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ (colormap) ‡πÅ‡∏ö‡∏ö binary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏ô‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ (0 ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏•‡∏∞ 1 ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á)

    # xticks ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏µ‡∏î‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô x ‡∏≠‡∏∞
    ax.set_xticks(np.arange(-0.5, model.p.size, 1), minor=True)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô , ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á tick marks ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà -0.5, 0.5, 1.5, ..., 19.5 ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏£‡∏∏‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ö‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£
    ax.set_yticks(np.arange(-0.5, model.p.size, 1), minor=True)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á

    ax.grid(which='minor', color='black', linestyle='-', linewidth=2)  # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡∏™‡∏µ‡∏î‡∏≥
    ax.tick_params(which='minor', size=0)  # ‡∏ã‡πà‡∏≠‡∏ô tick-mark

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î (size)
    ax.set_xticks(np.arange(model.p.size))  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏Å‡∏ô X
    ax.set_yticks(np.arange(model.p.size))  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏Å‡∏ô Y
    ax.set_xticklabels(np.arange(model.p.size))  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô X
    ax.set_yticklabels(np.arange(model.p.size))  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô Y

    SIZE_CIRCLE_DRAW = 40 # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏î

    # Plot bicycles
    positions_bicycle = {k: v for k, v in model.grid.positions.items() if isinstance(k, Bicycle)}
    # model.grid.positions ‡∏Ñ‡∏∑‡∏≠ dictionary ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô (agents) ‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô (agent) ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô key ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô (‡πÄ‡∏õ‡πá‡∏ô tuple (x, y)) ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô value
    # ==> ‡∏™‡πà‡∏ß‡∏ô items() ‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á key-value pairs ‡πÉ‡∏ô dictionary ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô (agents) ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏ß‡∏Å‡πÄ‡∏Ç‡∏≤.
    # k = ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô (agent) ‡πÄ‡∏ä‡πà‡∏ô Bicycle ‡∏´‡∏£‡∏∑‡∏≠ Person , v = ‡πÅ‡∏ó‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô (agent) ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (x, y)
    if positions_bicycle: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÉ‡∏ô simulation ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        y, x = zip(*positions_bicycle.values()) # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å positions.values() ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î y ‡πÅ‡∏•‡∏∞ x ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô zip() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ plot ‡∏à‡∏∏‡∏î
        ax.scatter(x, y, c='red', s=SIZE_CIRCLE_DRAW) # ‡∏ß‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡∏•‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ax.scatter() ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞ plot ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (x, y) , ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÅ‡∏î‡∏á (c='red') ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î (s=50)

    # Plot persons
    positions_person = {k: v for k, v in model.grid.positions.items() if isinstance(k, Person)}  # ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
    # positions_person ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô dictionary ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Person ‡πÄ‡∏ä‡πà‡∏ô {Person1: (x1, y1), Person2: (x2, y2),...}
    if positions_person:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        y_person, x_person = zip(*positions_person.values())  # ‡πÅ‡∏¢‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î y ‡πÅ‡∏•‡∏∞ x

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
        for person, (x, y) in zip(positions_person.keys(), zip(x_person, y_person)):
          # print(f"person üöºüöº : {person.name} --> status {person.isBike_in_use}")

          # Plot Destination ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Person
          des_y, des_x = person.destination
          ax.scatter(des_x, des_y, c='grey', s=SIZE_CIRCLE_DRAW)
          ax.text(des_x, des_y, f"Des-{person.name}", fontsize=10, ha='right')




    # Plot Person
    for agent in agents_Person:
        ax.text(x, y, f"P-{agent.name}", fontsize=10, ha='right')
        agent_position = model.grid.positions[agent]
        # color_person = 'yellow' if person.isBike_in_use == True else 'blue'
        ax.scatter(agent_position[1], agent_position[0], c='yellow' if agent.isBike_in_use == True else 'blue', s=SIZE_CIRCLE_DRAW)  # ‡∏ß‡∏≤‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏ü‡πâ‡∏≤


    # ‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®‚ú®
    positions_station = {k: v for k, v in model.grid.positions.items() if isinstance(k, Station)}  # ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
    if positions_station:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        y_station, x_station = zip(*positions_station.values())  # ‡πÅ‡∏¢‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î y ‡πÅ‡∏•‡∏∞ x
        ax.scatter(x_station, y_station, c='green', s=SIZE_CIRCLE_DRAW)
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        for station, (x, y) in zip(positions_station.keys(), zip(x_station, y_station)):
          ax.text(x, y, f"{station.name} {station.amount_Bicycle}", fontsize=10)


    ax.set_title(f"Traffic Simulation\n"
                  f"Time-step: {model.t}")

def run_model(max_steps):
    parameters = {
        'steps': max_steps,
        'agents_Bicycle':  1, # ‡∏°‡∏µ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ test ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏ö‡∏ô‡∏Å‡∏£‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞ step ‡πÄ‡∏â‡∏¢‡πÜ ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Station
        'agents_Person': 5,
        'size': 20, # ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏ß‡πâ‡∏≤‡∏áx‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏¥‡∏î
        'capicity_Station': 2, # ‡∏Ñ‡πà‡∏≤ capacity ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    }
    fig, ax = plt.subplots(figsize=(7, 7)) #  ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ (figure) ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà _x_ ‡∏ô‡∏¥‡πâ‡∏ß , fig ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô , ax ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Å‡∏ô (axis) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏î‡πÅ‡∏ú‡∏ô‡∏†‡∏≤‡∏û‡∏ö‡∏ô‡∏£‡∏π‡∏õ‡∏ô‡∏±‡πâ‡∏ô
    start_time = time.time() # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    model = TrafficModel(parameters)

    # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ax1
    animation = ap.animate(model, fig, ax, animation_plot) # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô animate ‡∏à‡∏≤‡∏Å‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ AgentPy ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• TrafficModel , animation_plot ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°

    # animation = FuncAnimation(
    #     fig, animation_plot, fargs=(model, ax),
    #     interval=2, repeat=True
    # )



    end_time = time.time() # ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å simulation ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
    # ‡∏à‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    print(f"Simulation time: üõïüõïüõïüõï {((end_time - start_time) * 1000):.2f} ms")


    # return IPython.display.HTML(animation.to_jshtml())
    return st.components.v1.html(animation.to_jshtml(fps=10), height=800)


# Create an input box for max_steps
max_steps_input = st.number_input(
    value=40,
    min_value=1,
    max_value=100,
    label='Max Steps:',
    step=1
)

max_steps_input = st.slider(
    value=40,
    min_value=1,
    max_value=100,
    label='Max Steps:',
    step=1
)

# # Button to start the simulation
# start_button = widgets.Button(description="Run Simulation")

# # Function to run simulation when button is clicked
# def on_button_clicked(b):
#     display(run_model(max_steps_input.value))

# # Link button click to simulation function
# start_button.on_click(on_button_clicked)

# # Display the input box and button
# display(max_steps_input, start_button)

if st.button("Run Simulation"):
    run_model(max_steps_input)

# Run the model and display the animation
# run_model(40) # max ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠100 ‡πÅ‡∏ï‡πà‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏ó‡∏∏‡∏Å agent ‡πÄ‡∏Ç‡πâ‡∏≤ des ‡πÑ‡∏õ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ,‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≥‡∏´‡∏ô‡∏î infinity ‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà int ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ